import os
import aiohttp
import subprocess
import shutil
import tempfile
import json
from datetime import datetime
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
from uuid import uuid4
from dotenv import load_dotenv
from frontend_bot.handlers.general import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
from frontend_bot.services.gpt_assistant import format_transcript_with_gpt
from frontend_bot.utils.logger import get_logger
from frontend_bot.keyboards.reply import (
    error_keyboard,
    transcript_format_keyboard,
    history_keyboard
)
from typing import Dict

logger = get_logger('transcribe')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '../../.env'))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
STORAGE_DIR = os.getenv("STORAGE_DIR", "storage")
TRANSCRIPTS_DIR = os.path.join(STORAGE_DIR, "transcripts")
os.makedirs(STORAGE_DIR, exist_ok=True)
os.makedirs(TRANSCRIPTS_DIR, exist_ok=True)

MAX_CHUNK_SIZE = 24 * 1024 * 1024  # 24 –ú–ë

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å user_id -> –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
user_transcripts: Dict[int, str] = {}

HISTORY_FILE = os.path.join(STORAGE_DIR, 'history.json')


def load_history() -> dict:
    if not os.path.exists(HISTORY_FILE):
        return {}
    with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_history(history: dict) -> None:
    with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=2)


def add_history_entry(user_id: str, file: str, file_type: str, result_type: str) -> None:
    history = load_history()
    entry = {
        'file': os.path.basename(file),
        'type': file_type,
        'result': result_type,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M')
    }
    if user_id not in history:
        history[user_id] = []
    history[user_id].append(entry)
    save_history(history)
    logger.info(
        f"History entry added for user {user_id}: {entry}"
    )


def get_user_history(user_id: str, limit: int = 5) -> list:
    history = load_history()
    return history.get(user_id, [])[-limit:]


def remove_last_history_entry(user_id: str) -> None:
    history = load_history()
    if user_id in history and history[user_id]:
        history[user_id].pop()
        save_history(history)
        logger.info(f"Last history entry removed for user {user_id}")


def protocol_error_keyboard() -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"))
    markup.add(KeyboardButton("–ù–∞–∑–∞–¥"))
    return markup


@bot.message_handler(func=lambda m: m.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
async def repeat_audio_instruction(message: Message):
    await bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
        "–≤ —ç—Ç–æ—Ç —á–∞—Ç –µ—â—ë —Ä–∞–∑.",
        reply_markup=None
    )
    logger.info(
        f"User {message.from_user.id} requested to repeat audio upload."
    )


@bot.message_handler(func=lambda m: m.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_from_anywhere(message: Message):
    from handlers.general import main_menu_keyboard
    await bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
    logger.info(f"User {message.from_user.id} returned to main menu.")


@bot.message_handler(content_types=['voice', 'audio'])
async def transcribe_audio(message: Message):
    await bot.send_chat_action(message.chat.id, 'typing')
    await bot.send_message(
        message.chat.id,
        "‚è≥ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
    )

    file_id = message.voice.file_id if message.voice else message.audio.file_id
    ext = ".ogg" if message.voice else ".mp3"
    temp_file = os.path.join(STORAGE_DIR, f"{uuid4()}{ext}")

    file_info = await bot.get_file(file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    with open(temp_file, "wb") as f:
        f.write(downloaded_file)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ mp3 –¥–ª—è Whisper
    temp_file_mp3 = temp_file.rsplit('.', 1)[0] + '.mp3'
    subprocess.run(["ffmpeg", "-y", "-i", temp_file, temp_file_mp3])

    file_size = os.path.getsize(temp_file_mp3)
    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç –∞—É–¥–∏–æ)
    approx_minutes = max(1, int(file_size / (1024 * 1024 * 2)))
    progress_msg = await bot.send_message(
        message.chat.id,
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...\n–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{approx_minutes} –º–∏–Ω."
    )

    user_id = message.from_user.id
    user_dir = os.path.join(TRANSCRIPTS_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)

    if file_size <= 25 * 1024 * 1024:
        try:
            await bot.edit_message_text(
                "üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞...",
                chat_id=message.chat.id,
                message_id=progress_msg.message_id
            )
            transcription = await whisper_transcribe(temp_file_mp3)
            transcript_path = os.path.join(user_dir, f"transcript_{uuid4()}.txt")
            with open(transcript_path, 'w', encoding='utf-8') as f:
                f.write(transcription)
            user_transcripts[user_id] = transcript_path
            await bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:",
                reply_markup=transcript_format_keyboard()
            )
            add_history_entry(
                str(user_id), transcript_path, 'audio', 'transcript'
            )
        except Exception:
            await bot.edit_message_text(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ "
                "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                chat_id=message.chat.id,
                message_id=progress_msg.message_id,
                reply_markup=error_keyboard()
            )
        finally:
            os.remove(temp_file)
            os.remove(temp_file_mp3)
        return

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π ‚Äî —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—É–∑–∞–º —á–µ—Ä–µ–∑ ffmpeg
    await bot.edit_message_text(
        "üî™ –ù–∞—Ä–µ–∑–∫–∞ –∞—É–¥–∏–æ –ø–æ –ø–∞—É–∑–∞–º...",
        chat_id=message.chat.id,
        message_id=progress_msg.message_id
    )
    chunk_dir = os.path.join(STORAGE_DIR, f"chunks_{uuid4()}")
    os.makedirs(chunk_dir, exist_ok=True)
    chunk_paths = split_audio_by_silence_ffmpeg(temp_file, chunk_dir)
    os.remove(temp_file)
    os.remove(temp_file_mp3)

    await bot.edit_message_text(
        f"üî™ –ù–∞—Ä–µ–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö—É—Å–∫–æ–≤: {len(chunk_paths)}.\n"
        "–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É..."
    )

    transcribed_text = ""
    for i, part_path in enumerate(chunk_paths):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫—É—Å–æ–∫ –≤ mp3
        part_path_mp3 = part_path.rsplit('.', 1)[0] + '.mp3'
        subprocess.run(["ffmpeg", "-y", "-i", part_path, part_path_mp3])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –∫—É—Å–∫–∞
        if os.path.getsize(part_path_mp3) > 25 * 1024 * 1024:
            await bot.send_message(
                message.chat.id,
                f"‚ùå –ö—É—Å–æ–∫ {i+1} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. "
                "–ü—Ä–æ–ø—É—â–µ–Ω."
            )
            os.remove(part_path)
            os.remove(part_path_mp3)
            continue
        try:
            await bot.edit_message_text(
                f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Å–∫–∞ {i+1}/{len(chunk_paths)}...",
                chat_id=message.chat.id,
                message_id=progress_msg.message_id
            )
            part_text = await whisper_transcribe(part_path_mp3)
            transcribed_text += f"\n--- –ß–∞—Å—Ç—å {i+1} ---\n{part_text}\n"
        except Exception:
            await bot.send_message(
                message.chat.id,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ "
                "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=error_keyboard()
            )
            transcribed_text += (
                f"\n--- –ß–∞—Å—Ç—å {i+1} ---\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ.\n"
            )
        finally:
            os.remove(part_path)
            os.remove(part_path_mp3)
    shutil.rmtree(chunk_dir, ignore_errors=True)
    await bot.edit_message_text(
        f"\u2705 –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"{transcribed_text[:1000]}...\n(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)",
        chat_id=message.chat.id,
        message_id=progress_msg.message_id,
        reply_markup=transcript_format_keyboard()
    )
    transcript_path = os.path.join(user_dir, f"transcript_{uuid4()}.txt")
    with open(transcript_path, 'w', encoding='utf-8') as f:
        f.write(transcribed_text)
    user_transcripts[user_id] = transcript_path
    await bot.send_message(
        message.chat.id,
        f"\u2705 –ò—Ç–æ–≥–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:"
        f"\n{transcript_path}"
    )
    add_history_entry(
        str(user_id), transcript_path, 'audio', 'transcript'
    )


def split_audio_by_silence_ffmpeg(
    input_path, output_dir, min_silence_len=0.7, silence_thresh=-30
):
    """
    –ù–∞—Ä–µ–∑–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –ø–∞—É–∑–∞–º —Å –ø–æ–º–æ—â—å—é ffmpeg.
    min_silence_len ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–∏—à–∏–Ω—ã (—Å–µ–∫—É–Ω–¥—ã)
    silence_thresh ‚Äî —É—Ä–æ–≤–µ–Ω—å —Ç–∏—à–∏–Ω—ã –≤ dB (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ 0)
    """
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
    duration = get_audio_duration(input_path)
    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—É–∑
    command = [
        "ffmpeg", "-i", input_path,
        "-af", f"silencedetect=noise={silence_thresh}dB:d={min_silence_len}",
        "-f", "null", "-"
    ]
    result = subprocess.run(command, stderr=subprocess.PIPE, text=True)
    silence_starts = []
    silence_ends = []
    for line in result.stderr.splitlines():
        if "silence_start" in line:
            silence_starts.append(float(line.split("silence_start: ")[-1]))
        if "silence_end" in line:
            silence_ends.append(
                float(line.split("silence_end: ")[-1].split(" |")[0])
            )
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏
    segments = []
    prev_end = 0.0
    for start in silence_starts:
        segments.append((prev_end, start))
        prev_end = start
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫
    if prev_end < duration:
        segments.append((prev_end, duration))
    # –ù–∞—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ
    chunk_paths = []
    for i, (start, end) in enumerate(segments):
        out_path = os.path.join(output_dir, f"chunk_{i+1}.ogg")
        subprocess.run([
            "ffmpeg", "-y", "-i", input_path,
            "-ss", str(start), "-to", str(end),
            "-c", "copy", out_path
        ])
        chunk_paths.append(out_path)
    return chunk_paths


def get_audio_duration(path):
    result = subprocess.run(
        [
            "ffprobe", "-v", "error", "-show_entries", "format=duration",
            "-of", "default=noprint_wrappers=1:nokey=1", path
        ],
        stdout=subprocess.PIPE, text=True
    )
    return float(result.stdout.strip())


async def whisper_transcribe(audio_path: str) -> str:
    url = "https://api.openai.com/v1/audio/transcriptions"
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    
    async with aiohttp.ClientSession() as session:
        with open(audio_path, "rb") as f:
            form = aiohttp.FormData()
            form.add_field("file", f, filename=os.path.basename(audio_path))
            form.add_field("model", "whisper-1")
            async with session.post(url, data=form, headers=headers) as resp:
                resp.raise_for_status()
                response = await resp.json()
                return response["text"]


@bot.message_handler(func=lambda m: m.text == "–ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
async def send_full_official_transcript(message: Message):
    user_id = message.from_user.id
    transcript_path = user_transcripts.get(user_id)
    if not transcript_path or not os.path.exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
            "–µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard()
        )
        return
    with open(transcript_path, 'r', encoding='utf-8') as f:
        transcript = f.read()
    await bot.send_chat_action(message.chat.id, 'typing')
    await bot.send_message(
        message.chat.id,
        "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –ø–æ–º–æ—â—å—é GPT..."
    )

    try:
        full_prompt = (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
            "–ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—ë—Ç—Å—è —Ç–µ–∫—Å—Ç —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã —Ä–∞–±–æ—á–µ–π –≤—Å—Ç—Ä–µ—á–∏ –≤ "
            "–Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ (—Ä–µ–ø–ª–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–¥—É—Ç —Å–ø–ª–æ—à–Ω—è–∫–æ–º, "
            "–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).\n"
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n"
            "1. –í—ã–¥–µ–ª–∏—Ç—å **—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏** –∏ –∏—Ö —Ä–æ–ª–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ).\n"
            "2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å **—á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π, –ª–æ–≥–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏—Ç—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç**, "
            "–≤—ã–¥–µ–ª—è—è:\n"
            "   - –ö—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, **–ò–≥–æ—Ä—å:**).\n"
            "   - –¢–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–±–ª–æ–∫–∞–º–∏: üîπ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, üîπ –°—Ä–æ–∫–∏, "
            "üîπ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏ —Ç.–ø.).\n"
            "3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å: —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—ã, ¬´—ç-—ç¬ª, "
            "–≤–≤–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞, –Ω–æ –Ω–µ –∏—Å–∫–∞–∂–∞—Ç—å —Å–º—ã—Å–ª.\n"
            "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å **—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫** –∏ –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ "
            "–¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–µ–π.\n"
            "5. –í —Ñ–∏–Ω–∞–ª–µ ‚Äî –≤—ã–¥–µ–ª–∏—Ç—å **–∏—Ç–æ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏** –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏.\n"
            "–°–æ—Ö—Ä–∞–Ω—è–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å, –∏–∑–±–µ–≥–∞–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n---\n"
            "## üóì –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏  \n"
            "**–§–æ—Ä–º–∞—Ç:** –û–Ω–ª–∞–π–Ω  \n"
            "**–£—á–∞—Å—Ç–Ω–∏–∫–∏:**  \n"
            "‚Äì –ò–≤–∞–Ω (PM), ‚Äì –û–ª—å–≥–∞ (–ê–Ω–∞–ª–∏—Ç–∏–∫), ‚Äì –°–µ—Ä–≥–µ–π (Dev)\n\n"
            "### üîπ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã  \n"
            "**–û–ª—å–≥–∞:** –û–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–µ–∫, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º React –∏ WebView...  \n"
            "**–°–µ—Ä–≥–µ–π:** –ù—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, —Ç–∞–º —É–∂–µ –µ—Å—Ç—å –Ω–∞–±—Ä–æ—Å–∫–∏...\n\n"
            "### üîπ –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏  \n"
            "- –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–∫ –Ω–∞ Android  \n"
            "- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å URL –¥–ª—è WebView  \n---\n\n"
            "–ù–∞—á–Ω–∏ —Å –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π "
            "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ. –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:"
        )

        formatted = await format_transcript_with_gpt(
            transcript,
            custom_prompt=full_prompt,
            temperature=0.2,
            top_p=0.7
        )

        with tempfile.NamedTemporaryFile(
            'w+', delete=False, suffix='.txt', encoding='utf-8'
        ) as f:
            f.write(formatted)
            temp_filename = f.name

        with open(temp_filename, 'rb') as f:
            await bot.send_document(
                message.chat.id,
                f,
                caption="üìù –ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç",
                reply_markup=transcript_format_keyboard()
            )
        os.remove(temp_filename)

    except Exception:
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ "
            "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=error_keyboard()
        )


@bot.message_handler(func=lambda m: m.text == "–°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É")
async def send_short_summary(message: Message):
    user_id = message.from_user.id
    transcript_path = user_transcripts.get(user_id)
    if not transcript_path or not os.path.exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
            "–µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard()
        )
        return
    with open(transcript_path, 'r', encoding='utf-8') as f:
        transcript = f.read()
    await bot.send_chat_action(message.chat.id, 'typing')
    await bot.send_message(
        message.chat.id,
        "ü§ñ –§–æ—Ä–º–∏—Ä—É—é —Å–≤–æ–¥–∫—É –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é GPT..."
    )
    try:
        summary_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–ª–æ–≤–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è "
            "—Ç–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç, –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, "
            "–∑–∞–¥–∞—á–∏, —Å—Ä–æ–∫–∏, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö. –ë—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω, –∏–∑–±–µ–≥–∞–π –ª–∏—à–Ω–∏—Ö "
            "–¥–µ—Ç–∞–ª–µ–π."
        )
        summary = await format_transcript_with_gpt(
            transcript,
            custom_prompt=summary_prompt,
            temperature=0.3,
            top_p=0.7
        )
        with tempfile.NamedTemporaryFile(
            'w+', delete=False, suffix='.txt', encoding='utf-8'
        ) as f:
            f.write(summary)
            temp_filename = f.name
        with open(temp_filename, 'rb') as f:
            await bot.send_document(
                message.chat.id,
                f,
                caption="üìù –°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É",
                reply_markup=transcript_format_keyboard()
            )
        os.remove(temp_filename)
    except Exception:
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ "
            "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=error_keyboard()
        )


@bot.message_handler(func=lambda m: m.text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å MoM")
async def send_mom(message: Message):
    user_id = message.from_user.id
    transcript_path = user_transcripts.get(user_id)
    if not transcript_path or not os.path.exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
            "–µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard()
        )
        return
    with open(transcript_path, 'r', encoding='utf-8') as f:
        transcript = f.read()
    await bot.send_chat_action(message.chat.id, 'typing')
    await bot.send_message(
        message.chat.id,
        "ü§ñ –§–æ—Ä–º–∏—Ä—É—é MoM (Minutes of Meeting) —Å –ø–æ–º–æ—â—å—é GPT..."
    )
    try:
        mom_prompt = (
            "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç MoM (Minutes of Meeting) –ø–æ "
            "–¥–µ–ª–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∑–∞–¥–∞—á–∏, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö, "
            "—Å—Ä–æ–∫–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ø—É–Ω–∫—Ç–∞–º: "
            "–†–µ—à–µ–Ω–∏—è, –ó–∞–¥–∞—á–∏, –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ, –°—Ä–æ–∫–∏, –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ "
            "–æ–±—Å—É–∂–¥–µ–Ω–∏–π. –û—Ñ–æ—Ä–º–∏ MoM –ª–∞–∫–æ–Ω–∏—á–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )
        mom_text = await format_transcript_with_gpt(
            transcript,
            custom_prompt=mom_prompt,
            temperature=0.2,
            top_p=0.6
        )
        with tempfile.NamedTemporaryFile(
            'w+', delete=False, suffix='.txt', encoding='utf-8'
        ) as f:
            f.write(mom_text)
            temp_filename = f.name
        with open(temp_filename, 'rb') as f:
            await bot.send_document(
                message.chat.id,
                f,
                caption="üìù MoM (Minutes of Meeting)",
                reply_markup=transcript_format_keyboard()
            )
        os.remove(temp_filename)
    except Exception:
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ "
            "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=error_keyboard()
        )


@bot.message_handler(func=lambda m: m.text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å ToDo-–ø–ª–∞–Ω —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏")
async def send_todo_checklist(message: Message):
    user_id = message.from_user.id
    transcript_path = user_transcripts.get(user_id)
    if not transcript_path or not os.path.exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
            "–µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard()
        )
        return
    with open(transcript_path, 'r', encoding='utf-8') as f:
        transcript = f.read()
    await bot.send_chat_action(message.chat.id, 'typing')
    await bot.send_message(
        message.chat.id,
        "ü§ñ –§–æ—Ä–º–∏—Ä—É—é ToDo-–ø–ª–∞–Ω —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏ —Å –ø–æ–º–æ—â—å—é GPT..."
    )
    try:
        todo_prompt = (
            "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ToDo-–ø–ª–∞–Ω –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º "
            "–≤—Å—Ç—Ä–µ—á–∏. –í—ã–¥–µ–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å, –∏ –æ—Ñ–æ—Ä–º–∏ –∏—Ö –≤ "
            "–≤–∏–¥–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤ —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏ —Å—Ä–æ–∫–∞–º–∏. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç "
            "–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–±–æ–∫—Å–æ–≤ "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, [ ] –ó–∞–¥–∞—á–∞). –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–µ–Ω –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞—Ö, –µ—Å–ª–∏ "
            "–∑–∞–¥–∞—á–∞ –Ω–µ—è–≤–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞."
        )
        todo_text = await format_transcript_with_gpt(
            transcript,
            custom_prompt=todo_prompt,
            temperature=0.5,
            top_p=0.9
        )
        with tempfile.NamedTemporaryFile(
            'w+', delete=False, suffix='.txt', encoding='utf-8'
        ) as f:
            f.write(todo_text)
            temp_filename = f.name
        with open(temp_filename, 'rb') as f:
            await bot.send_document(
                message.chat.id,
                f,
                caption="üìù ToDo-–ø–ª–∞–Ω —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏",
                reply_markup=transcript_format_keyboard()
            )
        os.remove(temp_filename)
    except Exception:
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ "
            "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=error_keyboard()
        )


@bot.message_handler(content_types=['document'])
async def handle_text_transcript_file(message: Message):
    if not message.document or not message.document.file_name.endswith('.txt'):
        await bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt."
        )
        return
    user_id = message.from_user.id
    user_dir = os.path.join(TRANSCRIPTS_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)
    file_info = await bot.get_file(message.document.file_id)
    file_path = os.path.join(user_dir, f"transcript_{uuid4()}.txt")
    downloaded_file = await bot.download_file(file_info.file_path)
    with open(file_path, "wb") as f:
        f.write(downloaded_file)
    user_transcripts[user_id] = file_path
    await bot.send_message(
        message.chat.id,
        "\u2705 –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=transcript_format_keyboard()
    )


@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
async def formats_info(message: Message):
    await bot.send_message(
        message.chat.id,
        "üìö –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "üìù –ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å "
        "–≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ç–µ–º –∏ –∏—Ç–æ–≥–æ–≤.\n\n"
        "üìÑ –°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.\n\n"
        "üìã MoM ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        "‚úÖ ToDo-–ø–ª–∞–Ω ‚Äî —á–µ–∫–ª–∏—Å—Ç –∑–∞–¥–∞—á –ø–æ –∏—Ç–æ–≥–∞–º –≤—Å—Ç—Ä–µ—á–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∂–µ!",
        reply_markup=transcript_format_keyboard()
    )


@bot.message_handler(commands=['history'])
async def show_history(message: Message):
    user_id = message.from_user.id
    entries = get_user_history(str(user_id))
    if entries:
        msg = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:\n'
        for e in reversed(entries):
            msg += (
                f"\nüìÑ {e['file']} | {e['type']} | {e['result']} | {e['date']}"
            )
        await bot.send_message(
            message.chat.id,
            msg,
            reply_markup=history_keyboard()
        )
    else:
        await bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.",
            reply_markup=history_keyboard()
        )


@bot.message_handler(func=lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –º–æ–π —Ñ–∞–π–ª")
async def delete_my_file(message: Message):
    user_id = message.from_user.id
    transcript_path = user_transcripts.get(user_id)
    if transcript_path and os.path.exists(transcript_path):
        os.remove(transcript_path)
        user_transcripts.pop(user_id, None)
        remove_last_history_entry(str(user_id))
        await bot.send_message(
            message.chat.id,
            "–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.",
            reply_markup=history_keyboard()
        )
    else:
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=history_keyboard()
        )


@bot.message_handler(func=lambda m: m.text == "–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)")
async def send_meeting_protocol(message: Message):
    user_id = message.from_user.id
    transcript_path = user_transcripts.get(user_id)
    if not transcript_path or not os.path.exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
            "–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard()
        )
        return
    with open(transcript_path, 'r', encoding='utf-8') as f:
        transcript = f.read()
    await bot.send_chat_action(message.chat.id, 'typing')
    await bot.send_message(
        message.chat.id,
        "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)..."
    )
    try:
        protocol_prompt = (
            "–¢—ã ‚Äî –¥–µ–ª–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞—é—â–∏–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. "
            "–ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—ë—Ç—Å—è —Ç–µ–∫—Å—Ç –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã —Å–æ–≤–µ—â–∞–Ω–∏—è. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–π "
            "–≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–∏–Ω—è—Ç–æ–º –¥–ª—è –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π (–∫–∞–∫ –≤ "
            "–æ–±—Ä–∞–∑—Ü–µ).\n\n"
            "‚ùóÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "1. –û—Ñ–æ—Ä–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–≥–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å –ø—É–Ω–∫—Ç–∞–º–∏, –¥–∞—Ç–æ–π, "
            "—Å–æ—Å—Ç–∞–≤–æ–º –≥—Ä—É–ø–ø—ã –∏ –ø–æ–≤–µ—Å—Ç–∫–æ–π.\n"
            "2. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π: –±–µ–∑ "
            "–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–æ–∏–º—ë–Ω, —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ‚Äî '–ü—Ä–∏–∑–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É "
            "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π', '–ì–æ–ª–æ—Å–æ–≤–∞–ª–∏: –∑–∞ ‚Äì –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ' –∏ —Ç.–ø.).\n"
            "3. –†–∞–∑–¥–µ–ª—ã:\n"
            "   - –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å [–£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ])\n"
            "   - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: '–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã –ø–æ ...'\n"
            "   - –î–∞—Ç–∞\n"
            "   - –°–æ—Å—Ç–∞–≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã (–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å, —Å–µ–∫—Ä–µ—Ç–∞—Ä—å, —á–ª–µ–Ω—ã)\n"
            "   - –ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è\n"
            "   - –•–æ–¥ –∑–∞—Å–µ–¥–∞–Ω–∏—è (–ø–æ –ø—É–Ω–∫—Ç–∞–º)\n"
            "   - –†–µ—à–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
            "   - –ü–æ–¥–ø–∏—Å–∏\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:\n"
            "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –±—é–¥–∂–µ—Ç–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ\n[–£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ]\n"
            "–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã –ø–æ [—É—Ç–æ—á–Ω–∏—Ç—å —Ç–µ–º—É]\n[–î–∞—Ç–∞]\n\n"
            "–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ:\n- –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å ‚Äî [–§–ò–û]\n- –°–µ–∫—Ä–µ—Ç–∞—Ä—å ‚Äî [–§–ò–û]\n"
            "- –ß–ª–µ–Ω—ã: [–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å]\n\n"
            "–ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è: [–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å 1‚Äì2 –ø—É–Ω–∫—Ç–∞]\n\n"
            "–•–æ–¥ –∑–∞—Å–µ–¥–∞–Ω–∏—è:\n1. –û–±—Å—É–¥–∏–ª–∏...\n2. –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ...\n"
            "3. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: '–ó–∞' ‚Äì –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ, '–ü—Ä–æ—Ç–∏–≤' ‚Äì –Ω–µ—Ç, '–í–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å' "
            "‚Äì –Ω–µ—Ç\n\n"
            "–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å: _______________\n–°–µ–∫—Ä–µ—Ç–∞—Ä—å: _______________\n\n"
            "üîΩ –ù–∏–∂–µ —Ç–µ–∫—Å—Ç —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã –≤—Å—Ç—Ä–µ—á–∏:\n"
        )
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —á–µ—Ä–µ–∑ GPT
        protocol_text = await format_transcript_with_gpt(
            transcript,
            custom_prompt=protocol_prompt,
            temperature=0.2,
            top_p=0.7
        )
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Word-—Ñ–∞–π–ª
        from docx import Document
        doc = Document()
        for line in protocol_text.split('\n'):
            doc.add_paragraph(line)
        with tempfile.NamedTemporaryFile(
            'wb', delete=False, suffix='.docx'
        ) as f:
            doc.save(f)
            temp_filename = f.name
        with open(temp_filename, 'rb') as f:
            await bot.send_document(
                message.chat.id,
                f,
                caption="üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)",
                reply_markup=transcript_format_keyboard()
            )
        os.remove(temp_filename)
        add_history_entry(
            str(user_id), temp_filename, 'word', 'protocol'
        )
    except Exception:
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. "
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.",
            reply_markup=protocol_error_keyboard()
        )


@bot.message_handler(func=lambda m: m.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
async def retry_meeting_protocol(message: Message):
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    await send_meeting_protocol(message)
