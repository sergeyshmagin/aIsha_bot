import re
from typing import Optional
from openai import AsyncOpenAI
from frontend_bot.config import ASSISTANT_ID, OPENAI_API_KEY
import asyncio

client = AsyncOpenAI(api_key=OPENAI_API_KEY)

def format_transcript_text(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏:
    - –†–∞–∑–¥–µ–ª—è–µ—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã
    - –í—ã–¥–µ–ª—è–µ—Ç —Ä–µ–ø–ª–∏–∫–∏ —Å–ø–∏–∫–µ—Ä–æ–≤
    - –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
    - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∏
    - –í—ã–¥–µ–ª—è–µ—Ç —Ü–∏—Ç–∞—Ç—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Markdown-—Ç–µ–∫—Å—Ç.
    """
    lines = text.split('\n')
    formatted = []
    last_speaker = None
    bullet_patterns = [
        r"^\s*\d+\. ",
        r"^\s*[-‚Äî‚Ä¢] ",
        r"^\s*\([a-zA-Z–∞-—è–ê-–Ø]\) ",
        r"^\s*\* "
    ]
    for raw_line in lines:
        line = raw_line.strip()
        if not line:
            continue
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏–∫–µ—Ä–∞
        speaker_match = re.match(r"^([–ê-–Ø–ÅA-Z][–∞-—è—ëa-zA-Z]+):", line)
        if speaker_match:
            speaker = speaker_match.group(1)
            content = line[len(speaker)+1:].strip()
            if speaker != last_speaker:
                formatted.append(f"\nüë§ **{speaker}:** {content}")
                last_speaker = speaker
            else:
                formatted.append(f"**{speaker}:** {content}")
            continue
        # –°–ø–∏—Å–∫–∏
        if any(re.match(pat, line) for pat in bullet_patterns):
            formatted.append(f"- {line}")
            continue
        # –¶–∏—Ç–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '>' –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç '—Ü–∏—Ç–∞—Ç–∞:')
        if line.startswith('>') or '—Ü–∏—Ç–∞—Ç–∞:' in line.lower():
            formatted.append(f"> {line}")
            continue
        # –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –∞–±–∑–∞—Ü
        if len(line) > 100:
            formatted.append(f"\n{line}\n")
        else:
            formatted.append(line)
    return '\n'.join(formatted)

async def format_transcript_with_gpt(
    transcript: str,
    ready_transcript: Optional[str] = None,
    custom_prompt: Optional[str] = None,
    temperature: float = 0.2,
    top_p: float = 0.8
) -> str:
    """
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ready_transcript ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
    –ò–Ω–∞—á–µ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —á–µ—Ä–µ–∑ OpenAI –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    if ready_transcript is not None:
        return format_transcript_text(ready_transcript)
    restriction = (
        "–í–Ω–∏–º–∞–Ω–∏–µ: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –∑–∞–¥–∞—á–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, –æ—Ç–≤–µ—á–∞–π: '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –≤—Å—Ç—Ä–µ—á–∏/–∑–∞–¥–∞—á–∏.'"
    )
    if not custom_prompt:
        return "–û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–¥–∞—á–∏."
    prompt = custom_prompt + '\n' + restriction
    thread = await client.beta.threads.create()
    thread_id = thread.id
    await client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=f"{prompt}\n\n{transcript}"
    )
    run = await client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID,
        temperature=temperature,
        top_p=top_p
    )
    while True:
        run_status = await client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run.id
        )
        if run_status.status in [
            "completed",
            "failed",
            "cancelled",
            "expired"
        ]:
            break
        await asyncio.sleep(1)
    messages = await client.beta.threads.messages.list(thread_id=thread_id)
    for msg in reversed(messages.data):
        if msg.role == "assistant":
            raw_text = msg.content[0].text.value
            return format_transcript_text(raw_text)
    return "–û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç."

# with open(
#     "test_transcript.txt", "r", encoding="utf-8"
# ) as f:
#     transcript_text = f.read()

# result = await format_transcript_with_gpt(
#     "", ready_transcript=transcript_text
# )
# print(result)
